Component
A component is a reusable piece of software. 
JavaScript-Component is simply a component developed using a JavaScript.
https://developer.telerik.com/featured/front-end-application-frameworks-component-architectures/ 
Generically speaking, in the context of the web, a UI component is a region in a web page that contains an isolated UI feature (i.e. a view) that is distinct from everything around it. For example, an HTML <select> element is considered a native HTML UI component.
What makes up a component?
a component is made up of some parts HTML, some parts CSS, and some parts JavaScript. In the past, these parts were divided into separate modules, separating concerns.
React where all the parts are defined in one module and potentially all written in JavaScript.
https://derickbailey.com/2015/08/26/building-a-component-based-web-ui-with-modern-javascript-frameworks/ 
A component is a small, potentially re-usable set of logic, behaviors and interface elements (UI or API). And without components or component-based UI development, our applications become monolithic spaghetti monsters and nightmares.
React vs angular components
https://derickbailey.com/2015/08/26/building-a-component-based-web-ui-with-modern-javascript-frameworks/ 

1.	Web Application Architecture

1.1.	Background
 
https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data 

General web application architecture consists of a client and a web server. The client sends HTTP requests to the web server, and the webserver then takes this request, possibly does some functionality and possibly returns some results. In the context of web applications, the browser client would ask for a web page from the webserver, and the webserver would then return an HTML document with some possible CSS styling to the userâ€™s browser. 
https://distrinet.cs.kuleuven.be/projects/sobenet/usergroup/working/docs/cms-architecture.pdf 

1.2.	Multi Page Application
Multi Page Applications are applications with one or more pages. Prior to modern front end technologies, web-applications model was a multi-page application. The disadvantage to having multiple pages for each change is mainly an irresponsive user experience, where when a user changes a page; it would take time for the browser to retrieve a new HTML document from the server. Per each change, usually the display data or submit data back to server requests rendering a new page from the server in the browsers. This is not an efficient process of small changes that are required. 
1.3.	Single Page Applications (SPA)
Single Page Application models better in terms of user experience. In SPAs, the entire application content is loaded initially (HTML, CSS, Scripts), so when there is some required event change by the user, another page is not needed, but rather the change is done within the single loaded page. Only the data is transmitted back and forth, and this is done through JavaScript functions. 
https://medium.com/@NeotericEU/single-page-application-vs-multiple-page-application-2591588efe58   
1.3.1.	Data Transfer and Server Architecture

1.3.2.	Routing
2.	JavaScript Frameworks
2.1.	Background: what is a JS framework?

